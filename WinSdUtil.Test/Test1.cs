using System.Management;
using WinSdUtil;
using static System.Net.Mime.MediaTypeNames;

namespace WinSdUtil.Test
{
    [TestClass]
    public sealed class Test1
    {
        readonly List<string> TestSddls =
        [
            /*"O:AOG:SYD:(A;;RPWPCCDCLCRCWOWDSDSW;;;SY)(A;;RPWPCCDCLCRCWOWDSDSW;;;SY)(OA;;CCDC;bf967aba-0de6-11d0-a285-00aa003049e2;;AO)(OA;;CCDC;bf967a9c-0de6-11d0-a285-00aa003049e2;;AO)(OA;;CCDC;6da8a4ff-0e52-11d0-a286-00aa003049e2;;AO)(OA;;CCDC;bf967aa8-0de6-11d0-a285-00aa003049e2;;PO)(A;;RPLCRC;;;AU)S:(AU;SAFA;WDWOSDWPCCDCSW;;;WD)",
            "O:AOG:SYD:PARAI(A;;RPWPCCDCLCRCWOWDSDSW;;;SY)S:PARAI(AU;SAFA;WDWOSDWPCCDCSW;;;WD)",
            "G:SYD:(A;;RPWPCCDCLCRCWOWDSDSW;;;SY)(A;;RPWPCCDCLCRCWOWDSDSW;;;SY)(OA;;CCDC;bf967aba-0de6-11d0-a285-00aa003049e2;;AO)(OA;;CCDC;bf967a9c-0de6-11d0-a285-00aa003049e2;;AO)(OA;;CCDC;6da8a4ff-0e52-11d0-a286-00aa003049e2;;AO)(OA;;CCDC;bf967aa8-0de6-11d0-a285-00aa003049e2;;PO)(A;;RPLCRC;;;AU)S:(AU;SAFA;WDWOSDWPCCDCSW;;;WD)",
            "D:(A;;RPWPCCDCLCRCWOWDSDSW;;;SY)",
            "S:(AU;SAFA;WDWOSDWPCCDCSW;;;WD)",
            "G:SYD:NO_ACCESS_CONTROL",
            "O:SYG:SYD:NO_ACCESS_CONTROL",*/
            "O:SYG:SYD:AI(XA;ID;0x1200a9;;;BU;(WIN://SYSAPPID Contains \"Microsoft.WindowsTerminal_8wekyb3d8bbwe\"))(A;ID;0x1200a9;;;S-1-15-3-1254322593-1477425798-1529151232-702750859-81020123-3651049416-2875749711)(A;ID;FR;;;BU)(A;ID;FA;;;S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)(A;ID;0x1200a9;;;S-1-15-3-1024-3635283841-2530182609-996808640-1887759898-3848208603-3313616867-983405619-2501854204)(A;ID;FA;;;SY)(A;ID;0x1200a9;;;LS)(A;ID;0x1200a9;;;NS)(A;ID;0x1200a9;;;RC)"
        ];

        readonly List<byte[]> TestBytes =
        [
            [0x01, 0x00, 0x04, 0x80, 0xA0, 0x00, 0x00, 0x00, 0xAC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x02, 0x00, 0x8C, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x17, 0x00, 0x0F, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x20, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x17, 0x00, 0x0F, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x20, 0x00, 0x00, 0x00, 0x25, 0x02, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x17, 0x00, 0x0F, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x20, 0x00, 0x00, 0x00, 0x23, 0x02, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x07, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x12, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x12, 0x00, 0x00, 0x00],
            [0x01,0x00,0x14,0x80,0xe4,0x00,0x00,0x00,0xf0,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x02,0x00,0x34,0x00,0x02,0x00,0x00,0x00,0x02,0x80,0x14,0x00,0xff,0x01,0x0f,0x00,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x14,0x00,0x18,0x00,0x9d,0x01,0x02,0x00,0x01,0x02,0x00,0x00,0x00,0x00,0x00,0x13,0x00,0x02,0x00,0x00,0x00,0x06,0x00,0x00,0x02,0x00,0x9c,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x9d,0x01,0x02,0x00,0x01,0x02,0x00,0x00,0x00,0x00,0x00,0x05,0x20,0x00,0x00,0x00,0x21,0x02,0x00,0x00,0x00,0x00,0x14,0x00,0x9d,0x01,0x02,0x00,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x05,0x12,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x9d,0x01,0x02,0x00,0x01,0x02,0x00,0x00,0x00,0x00,0x00,0x05,0x20,0x00,0x00,0x00,0x20,0x02,0x00,0x00,0x00,0x00,0x14,0x00,0x9d,0x01,0x02,0x00,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x05,0x04,0x00,0x00,0x00,0x00,0x00,0x14,0x00,0x9d,0x01,0x02,0x00,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x05,0x06,0x00,0x00,0x00,0x00,0x00,0x28,0x00,0xff,0x01,0x0f,0x00,0x01,0x06,0x00,0x00,0x00,0x00,0x00,0x05,0x50,0x00,0x00,0x00,0xbf,0x55,0x08,0x72,0x3b,0xe0,0x28,0xd0,0x89,0x79,0x4b,0xf8,0x91,0x89,0x6e,0x7c,0x40,0x25,0xec,0xf4,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x05,0x12,0x00,0x00,0x00,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x05,0x12,0x00,0x00,0x00],
            [0x01, 0x00, 0x04, 0x84, 0xA8, 0x01, 0x00, 0x00, 0xB4, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x02, 0x00, 0x94, 0x01, 0x09, 0x00, 0x00, 0x00, 0x09, 0x10, 0x94, 0x00, 0xA9, 0x00, 0x12, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x20, 0x00, 0x00, 0x00, 0x21, 0x02, 0x00, 0x00, 0x61, 0x72, 0x74, 0x78, 0xF8, 0x1C, 0x00, 0x00, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4E, 0x00, 0x3A, 0x00, 0x2F, 0x00, 0x2F, 0x00, 0x53, 0x00, 0x59, 0x00, 0x53, 0x00, 0x41, 0x00, 0x50, 0x00, 0x50, 0x00, 0x49, 0x00, 0x44, 0x00, 0x10, 0x4E, 0x00, 0x00, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x63, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x6F, 0x00, 0x66, 0x00, 0x74, 0x00, 0x2E, 0x00, 0x57, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x73, 0x00, 0x54, 0x00, 0x65, 0x00, 0x72, 0x00, 0x6D, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x5F, 0x00, 0x38, 0x00, 0x77, 0x00, 0x65, 0x00, 0x6B, 0x00, 0x79, 0x00, 0x62, 0x00, 0x33, 0x00, 0x64, 0x00, 0x38, 0x00, 0x62, 0x00, 0x62, 0x00, 0x77, 0x00, 0x65, 0x00, 0x86, 0x00, 0x00, 0x00, 0x00, 0x10, 0x30, 0x00, 0xA9, 0x00, 0x12, 0x00, 0x01, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x03, 0x00, 0x00, 0x00, 0xA1, 0x71, 0xC3, 0x4A, 0x86, 0xBA, 0x0F, 0x58, 0x00, 0xFF, 0x24, 0x5B, 0x8B, 0x20, 0xE3, 0x29, 0xDB, 0x44, 0xD4, 0x04, 0xC8, 0x97, 0x9E, 0xD9, 0x4F, 0x75, 0x68, 0xAB, 0x00, 0x10, 0x18, 0x00, 0x89, 0x00, 0x12, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x20, 0x00, 0x00, 0x00, 0x21, 0x02, 0x00, 0x00, 0x00, 0x10, 0x28, 0x00, 0xFF, 0x01, 0x1F, 0x00, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x50, 0x00, 0x00, 0x00, 0xB5, 0x89, 0xFB, 0x38, 0x19, 0x84, 0xC2, 0xCB, 0x5C, 0x6C, 0x23, 0x6D, 0x57, 0x00, 0x77, 0x6E, 0xC0, 0x02, 0x64, 0x87, 0x00, 0x10, 0x38, 0x00, 0xA9, 0x00, 0x12, 0x00, 0x01, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x81, 0x07, 0xAE, 0xD8, 0xD1, 0x85, 0xCF, 0x96, 0xC0, 0x17, 0x6A, 0x3B, 0x1A, 0xEE, 0x84, 0x70, 0xDB, 0x00, 0x5F, 0xE5, 0xE3, 0xC7, 0x81, 0xC5, 0x33, 0x94, 0x9D, 0x3A, 0xFC, 0x43, 0x1F, 0x95, 0x00, 0x10, 0x14, 0x00, 0xFF, 0x01, 0x1F, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x12, 0x00, 0x00, 0x00, 0x00, 0x10, 0x14, 0x00, 0xA9, 0x00, 0x12, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x13, 0x00, 0x00, 0x00, 0x00, 0x10, 0x14, 0x00, 0xA9, 0x00, 0x12, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x14, 0x00, 0x00, 0x00, 0x00, 0x10, 0x14, 0x00, 0xA9, 0x00, 0x12, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0C, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x12, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x12, 0x00, 0x00, 0x00],
        ];

        [TestMethod]
        public void TestSddlToBin()
        {
            var sdConv = new WinSdConverter();
            int i = 1;
            foreach (var test in TestSddls)
            {
                Console.WriteLine($"Test SDDL {i++}: {test}");
                var acl = sdConv.FromSddlToAcl(test);
                Console.WriteLine(acl.ToString());
                var wmiBin = WmiGetBinarySd(test);
                var sdConvBin = acl.ToBinarySd().Value;
                Console.WriteLine($"Baseline Binary : {BitConverter.ToString(wmiBin)}");
                Console.WriteLine($"Converted Binary: {BitConverter.ToString(sdConvBin)}");
                Console.WriteLine(new string('-', 50));
            }
        }

        [TestMethod]
        public void TestBinToSddl()
        {
            var sdConv = new WinSdConverter();
            foreach (var test in TestBytes)
            {
                var acl = sdConv.FromBinaryToAcl(test);
                Console.WriteLine(acl.ToString());
                Console.WriteLine($"Baseline SDDL : {WmiGetSddl(test)}");
                Console.WriteLine($"Converted SDDL: {acl.ToSDDL().Value}");
                Console.WriteLine(new string('-', 50));
            }
        }

        static byte[] WmiGetBinarySd(string SDDL)
        {
#pragma warning disable CA1416 // Validate platform compatibility

            using ManagementClass Win32SdHelper = new ManagementClass("Win32_SecurityDescriptorHelper");

            var inparam = Win32SdHelper.GetMethodParameters("SDDLToBinarySD");
            inparam["SDDL"] = SDDL;
            var outparam = Win32SdHelper.InvokeMethod("SDDLToBinarySD", inparam, null);
            var rtValue = (uint)outparam["ReturnValue"];
            var bin = (byte[])outparam["BinarySD"];
            if (rtValue == 0) return bin;
            else
            {
                throw new Exception($"WMI SD conversion failure: {rtValue:X}");
            }
#pragma warning restore CA1416 // Validate platform compatibility
        }

        static string WmiGetSddl(byte[] BinarySd)
        {
#pragma warning disable CA1416 // Validate platform compatibility

            using ManagementClass Win32SdHelper = new ManagementClass("Win32_SecurityDescriptorHelper");

            var inparam = Win32SdHelper.GetMethodParameters("BinarySDToSDDL");
            inparam["BinarySD"] = BinarySd;
            var outparam = Win32SdHelper.InvokeMethod("BinarySDToSDDL", inparam, null);
            var rtValue = (uint)outparam["ReturnValue"];
            var sddl = (string)outparam["SDDL"];
            if (rtValue == 0) return sddl;
            else
            {
                throw new Exception($"WMI SD conversion failure: {rtValue:X}");
            }
#pragma warning restore CA1416 // Validate platform compatibility
        }
    }
}
